import Head from 'next/head'
import Link from 'next/link'
import { signIn, signOut, useSession } from 'next-auth/client'
import { useRouter } from 'next/dist/client/router'
import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import _ from 'lodash'

import { Nav } from '../components/Nav'
import { Searchbar } from '../components/Searchbar'
import { RecipeList } from '../components/RecipeList'
import { TagFilters } from '../components/TagFilters'
import { CalorieSlider } from '../components/CalorieSlider'
import { PrimaryButton, SecondaryButton } from '../components/Button'
import { RecipeSubmitModal } from '../components/RecipeSubmitModal'
import { Modal } from '../components/Modal'
import { OldDropdown } from '../components/Dropdown'
import { Recipe } from '../server/interfaces'

import { getRecipes } from '../functions/api/recipes'
import { getFavorites } from '../functions/api/users'
import { Toggle } from '../components/Toggle'

export default function Home() {
	const router = useRouter()
	const [session, loading] = useSession()
	const [recipeArray, setRecipeArray] = useState<Recipe[]>([])
	// const [favoriteArray, setFavoriteArray] = useState<Recipe[]>([])

	useEffect(() => {
		if (router.isReady)
			getRecipes(router.query).then(recipes => setRecipeArray(recipes))
	}, [router.query])

	// useEffect(() => {
	// 	if (session && session.user) {
	// 		getFavorites({ id: session.user.uid }).then(recipes =>
	// 			setFavoriteArray(recipes)
	// 		)
	// 	}
	// }, [session])

	return (
		<>
			<Head>
				<title>Recipes</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<StyledPageBackground>
				<StyledPageGrid>
					<Nav>
						{router.isReady && <Searchbar />}
						<StyledNavFlexSpacer />
						<StyledNavButtonsWrapper>
							{session && (
								<>
									<Modal buttonText='New Recipe'>
										<RecipeSubmitModal />
									</Modal>
									<SecondaryButton onClick={() => signOut()}>
										Log Out
									</SecondaryButton>
								</>
							)}
							{!session && (
								<>
									<PrimaryButton onClick={() => signIn()}>Login</PrimaryButton>
								</>
							)}
						</StyledNavButtonsWrapper>
					</Nav>

					<Aside>
						<TagFilters />
						{/* <Toggle label='testing' /> */}
						<CalorieSlider rangeMin={0} rangeMax={800} />
					</Aside>

					<Main>
						{/* <StyledRecipeListsWrapper> */}
						{recipeArray && <RecipeList id='rlist' recipes={recipeArray} />}
						{/* </StyledRecipeListsWrapper> */}
					</Main>
				</StyledPageGrid>
			</StyledPageBackground>

			{/* <Main2>
				<StyledContentWrapper>
					<StyledSidebarWrapper>
						<TagFilters />
						<CalorieSlider rangeMin={0} rangeMax={800} />
					</StyledSidebarWrapper>
					<StyledRecipeListsWrapper>
						{recipeArray && <RecipeList id='rlist' recipes={recipeArray} />}
					</StyledRecipeListsWrapper>
				</StyledContentWrapper>
			</Main2> */}
		</>
	)
}

const StyledPageBackground = styled.div`
	background-color: ${p => p.theme.color.gamma};
`

const StyledPageGrid = styled.div`
	max-width: 1300px;
	margin: 0 auto;
	padding: 0 10px;
	display: grid;
	grid-template-columns: repeat(12, 1fr);
	grid-template-rows: 100px minmax(calc(100vh - 100px), auto);
`

const Aside = styled.aside`
	grid-column: 1 / 4;
	padding-right: 15px;
	@media only screen and (min-width: 768px) {
		grid-column: 1 / 3;
	}
	@media only screen and (min-width: 992px) {
		padding-right: 30px;
	}
`

const Main = styled.main`
	grid-column: 4 / 13;

	@media only screen and (min-width: 768px) {
		grid-column: 3 / 13;
	}
`

const StyledNavFlexSpacer = styled.div`
	flex: 1;
`

const StyledNavButtonsWrapper = styled.div`
	display: flex;
	> :not(:first-child) {
		margin-left: 10px;
	}
`

///////////////////////

const Main2 = styled.main`
	position: relative;
	min-height: 100vh;
	display: flex;
	flex-direction: column;
	background-color: ${p => p.theme.color.gamma};
`

const StyledContentWrapper = styled.div`
	display: flex;
	flex: 1;
`

const StyledSidebarWrapper = styled.div`
	width: 13vw;
	min-width: 13vw;
	display: flex;
	flex-direction: column;
	background-color: ${p => p.theme.color.white};
	padding: 0.5rem;
`

const StyledRecipeListsWrapper = styled.div`
	flex: 1;
	display: flex;
	flex-direction: column;
`

const StyledFavoritesWrapper = styled.div`
	background-color: #ddeeed;
	margin: 2rem;
`
